{"ast":null,"code":"var _jsxFileName = \"/Volumes/countstarss/Skill Stack/React/ReactLearn/usePopcorn/src/PackingList.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Item from './Item.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PackingList({\n  items,\n  onDeleteItem,\n  onToggleItems,\n  onClearItem\n}) {\n  _s();\n  const [sortBy, setSortBy] = useState(\"input\");\n  let sortedItems;\n\n  // derived State（派生状态）的应用，省去了手动更新State的麻烦\n  //三种不同的排序方式，核心思想都是使用数组方法实现一个新的数组，然后用新的数组去渲染页面\n  if (sortBy === \"input\") sortedItems = items;\n  if (sortBy === \"description\") sortedItems = items.slice().sort((a, b) => a.description.localCompare(b.description));\n  if (sortBy === \"packed\") sortedItems = items.slice().sort((a, b) => Number(a.packed) - Number(b.packed));\n\n  //可以看到sortItems接过了新的数组，然后在下面的ul中渲染item\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sortedItems.map(item => /*#__PURE__*/_jsxDEV(Item, {\n        item: item,\n        onDeleteItem: onDeleteItem,\n        onToggleItems: onToggleItems\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: sortBy,\n        onChange: e => setSortBy(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"Sort by input order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"decsription\",\n          children: \"Sort by decsription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"packed\",\n          children: \"Sort by packed status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClearItem,\n        children: \"Clear list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n}\n_s(PackingList, \"3HXYaurhTOKrR4QsMAxSV7huNGI=\");\n_c = PackingList;\nvar _c;\n$RefreshReg$(_c, \"PackingList\");","map":{"version":3,"names":["useState","Item","jsxDEV","_jsxDEV","PackingList","items","onDeleteItem","onToggleItems","onClearItem","_s","sortBy","setSortBy","sortedItems","slice","sort","a","b","description","localCompare","Number","packed","className","children","map","item","id","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Volumes/countstarss/Skill Stack/React/ReactLearn/usePopcorn/src/PackingList.js"],"sourcesContent":["import { useState } from 'react';\r\nimport Item from './Item.js';\r\n\r\nexport function PackingList({ items, onDeleteItem, onToggleItems, onClearItem }) {\r\n\r\n\tconst [sortBy, setSortBy] = useState(\"input\");\r\n\r\n\tlet sortedItems;\r\n\r\n\t// derived State（派生状态）的应用，省去了手动更新State的麻烦\r\n\t//三种不同的排序方式，核心思想都是使用数组方法实现一个新的数组，然后用新的数组去渲染页面\r\n\tif (sortBy === \"input\") sortedItems = items;\r\n\r\n\tif (sortBy === \"description\") sortedItems = items.slice()\r\n\t\t.sort((a, b) => a.description.localCompare(b.description)\r\n\t\t);\r\n\r\n\tif (sortBy === \"packed\") sortedItems = items.slice()\r\n\t\t.sort((a, b) => Number(a.packed) - Number(b.packed)\r\n\t\t);\r\n\r\n\r\n\r\n\t//可以看到sortItems接过了新的数组，然后在下面的ul中渲染item\r\n\treturn (\r\n\t\t<div className='list'>\r\n\t\t\t<ul>\r\n\t\t\t\t{/* 这里原来是使用initialItem进行map,现在使用items,items是原数组添加新数据之后的数组 */}\r\n\t\t\t\t{sortedItems.map(\r\n\t\t\t\t\t(item) => (<Item\r\n\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\tonDeleteItem={onDeleteItem}\r\n\t\t\t\t\t\tonToggleItems={onToggleItems}\r\n\t\t\t\t\t\tkey={item.id} />\r\n\t\t\t\t\t)\r\n\t\t\t\t)}\r\n\t\t\t</ul>\r\n\t\t\t<div className='actions'>\r\n\t\t\t\t<select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\r\n\t\t\t\t\t<option value=\"input\">Sort by input order</option>\r\n\t\t\t\t\t<option value=\"decsription\">Sort by decsription</option>\r\n\t\t\t\t\t<option value=\"packed\">Sort by packed status</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t<button onClick={onClearItem}>Clear list</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,OAAO,SAASC,WAAWA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,aAAa;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAEhF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC;EAE7C,IAAIY,WAAW;;EAEf;EACA;EACA,IAAIF,MAAM,KAAK,OAAO,EAAEE,WAAW,GAAGP,KAAK;EAE3C,IAAIK,MAAM,KAAK,aAAa,EAAEE,WAAW,GAAGP,KAAK,CAACQ,KAAK,CAAC,CAAC,CACvDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,WAAW,CAACC,YAAY,CAACF,CAAC,CAACC,WAAW,CACxD,CAAC;EAEF,IAAIP,MAAM,KAAK,QAAQ,EAAEE,WAAW,GAAGP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAClDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKG,MAAM,CAACJ,CAAC,CAACK,MAAM,CAAC,GAAGD,MAAM,CAACH,CAAC,CAACI,MAAM,CAClD,CAAC;;EAIF;EACA,oBACCjB,OAAA;IAAKkB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACpBnB,OAAA;MAAAmB,QAAA,EAEEV,WAAW,CAACW,GAAG,CACdC,IAAI,iBAAMrB,OAAA,CAACF,IAAI;QACfuB,IAAI,EAAEA,IAAK;QACXlB,YAAY,EAAEA,YAAa;QAC3BC,aAAa,EAAEA;MAAc,GACxBiB,IAAI,CAACC,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAEjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACL1B,OAAA;MAAKkB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACvBnB,OAAA;QAAQ2B,KAAK,EAAEpB,MAAO;QAACqB,QAAQ,EAAGC,CAAC,IAAKrB,SAAS,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAR,QAAA,gBACjEnB,OAAA;UAAQ2B,KAAK,EAAC,OAAO;UAAAR,QAAA,EAAC;QAAmB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClD1B,OAAA;UAAQ2B,KAAK,EAAC,aAAa;UAAAR,QAAA,EAAC;QAAmB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxD1B,OAAA;UAAQ2B,KAAK,EAAC,QAAQ;UAAAR,QAAA,EAAC;QAAqB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACT1B,OAAA;QAAQ+B,OAAO,EAAE1B,WAAY;QAAAc,QAAA,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER;AAACpB,EAAA,CA5CeL,WAAW;AAAA+B,EAAA,GAAX/B,WAAW;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}